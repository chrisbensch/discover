Bash


sed -e 's/^/FOO/'                                   # Add FOO to the beginning of each line
sed -e 's/$/FOO/'                                   # Add FOO to the end of each line
column -t                                           # Align columns

sed 's/\b\(.\)/\u\1/g'                              # Capitalize the first letter of every word
tr '[A-Z]' '[a-z]'                                  # Change to lower case
sed /^$/d                                           # Compress blank lines
paste -s -d" "                                      # Convert a list into a single line

grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}'              # Find IPs
perl -pe 's/\d{2}\/\d{2}\/\d{2}//g'                 # Find dates mm/dd/yy
sed 's/[0-9]\{2\}\/[0-9]\{2\}\/[0-9]\{2\}//g'       # Find dates mm/dd/yy

sed '/[[:blank:]]/d'                                # Find lines that contain a single word
grep 'FOO'                                          # Find lines that contain FOO        
sed '/FOO/I,+12 d'                                  # Find lines that contain FOO, and delete that and the next 12 lines
sed -i '/FOO/,${D}' file                            # Find lines that contain FOO, and delete to the end of file
grep 'FOO\|BAR'                                     # Find lines that contain FOO, and lines that contain BAR
sed '1N;N;/\(.*\n\)\{2\}.*FOO/P;$d;D'               # Find lines that contain FOO, and print the second line before that

grep 'FOO$'                                         # Find lines that end with FOO

grep '^FOO'                                         # Find lines that start with FOO
sed '/^FOO/{n;d;}'                                  # Find lines that start with FOO, and delete the following line
printf '%s\n' 'g/^FOO/-1d' w | ed -s                # Find lines that start with FOO, and delete the previous line
sed '/^FOO/i\ '                                     # Find lines that start with FOO, and insert a line before
sed '/^FOO/a\ '                                     # Find lines that start with FOO, and insert a line after
sed -e :a -e '$!N;s/\nFOO/ /;ta' -e 'P;D' file      # Find lines that start with FOO, insert a space and append to the previous line

awk '{print $2 " " $1}'                             # Print the second column, insert a space, then the first column
sed -n '/FOO/,$p'                                   # Print from FOO to the end of the file
sed -n '5,/^$/p'                                    # Print from the 5th line to the first blank line
sed -n '/FOO/,/BAR/p'                               # Print lines between FOO and BAR

for x in $(cat tmp); do rm $x; done                 # Remove all files in tmp
sed 's/[A-Z]\{2\},//g'                              # Remove any 2 capital letters followed by a comma
awk '$2 !~ /[a-z]/'                                 # Remove lines that contain [a-z] in the second column
sed '/^$/d'                                         # Remove blank lines
cat -s                                              # Remove double spacing
sed 's/^....//'                                     # Remove first 4 characters from each line
sed '1,5d'                                          # Remove first 5 lines
sed 's/^[ \t]*//;s/[ \t]*$//'                       # Remove leading and trailing whitespace from each line
sed 's/^[ \t]*//'                                   # Remove leading whitespace from each line
sed 's/[ \t]*$//'                                   # Remove trailing whitespace from each line
for a in z*; do grep -vE '^[\/\#\(\_\[\|\<\.\,\`\%\@]' "$a" > "$a.tmp"; mv "$a.tmp" "$a"; done    
                                                    # Remove lines starting with various non-characters
sed '/FOO/,/BAR/d'                                  # Remove lines between FOO and BAR
sed '/[[:blank:]]/!d'                               # Remove lines that contain a single word
printf '%s\n' 'g/FOO/d\' '-d' w | ed -s             # Remove lines that contain FOO and the previous line
sed '/@.*@/d'                                       # Remove lines that contain two @ symbols
sed '/^[0-9]/d'                                     # Remove lines that start with a number
sed '/[0-9]$/d'                                     # Remove lines that end with a number
sed '/^FOO/d'                                       # Remove lines that start with FOO
sed '/FOO$/d'                                       # Remove lines that end with FOO

sed 's/FOO/BAR/g'                                   # Replace FOO with BAR
sed '/TEST/s/FOO/BAR/g'                             # Replace FOO with BAR, on lines that contain TEST
sed '/TEST/!s/FOO/BAR/g'                            # Replace FOO with BAR, except on lines that contain TEST
sed 's/FOO//g'                                      # Replace FOO with nothing
sed 's/\.\.\.//g'                                   # Replace 3 periods with nothing                
cat tmp | tr ';' '\n'                               # Replace semicolon with a new line

sort -k2                                            # Sort by the second column
sort -n -u -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4         # Sort IPs
sed "s/$FOO./$FOO/g"                                # Variables - use double quotes with sed or grep
------------------------------------------------------------------------------------------------------

# Compare two dates

date1=$(date +"%s")
date2=$(date +"%s")
diff=$(($date2-$date1))
echo "$(($diff / 60)) min and $(($diff % 60)) sec."
------------------------------------------------------------------------------------------------------

# Color

31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 

echo -e "\e[1;34mThis is a blue text.\e[0m"
------------------------------------------------------------------------------------------------------

# Check for no answer

if [ -z $location ]; then
     f_Error
     return 0
fi
------------------------------------------------------------------------------------------------------

# Check for wrong answer

if [ ! -f $location ]; then
     f_Error
     return 0
fi
------------------------------------------------------------------------------------------------------

# Check if argument was given, if not, print usage

if [ -z "$1" ]; then
     echo "Usage : $0 <domain name>"
     exit 0
fi
------------------------------------------------------------------------------------------------------

if [ -d /root/test ]; then
     echo "This folder exists."
fi

if [ -f /root/test ]; then
     echo "This file exists."
fi

# If folder doesn't exist, create it
if [ ! -d /root/test ]; then
     mkdir /root/test
fi

if [ ! -s test ]; then 
     echo "This file is empty."
fi
------------------------------------------------------------------------------------------------------

# Check for root

if [ $(whoami) = "root" ]; then 
     echo "You are running as root."
fi
------------------------------------------------------------------------------------------------------

pid=`ps ax | grep ping | grep -v grep | awk '{print $1}'`

if [ -n "$pid" ] ; then
     kill $pid
fi
------------------------------------------------------------------------------------------------------

# Find all of the subdomains listed on Cisco's homepage and print their IPs.

#!/bin/bash

clear

wget -q cisco.com

grep 'href' index.html | cut -d '/' -f3 | cut -d '"' -f1 | grep 'cisco' | sort -u > subdomains.txt

for x in $(cat subdomains.txt); do
     host $x | grep 'has address' | cut -d ' ' -f4
done

-----

# Use 'while' and 'done'.

while read -r line; do
	host $line | grep 'has address' | cut -d ' ' -f4
done < subdomains.txt

